# plugin management
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_if = 'executable("make")'

[[plugins]]
repo = 'neomake/neomake'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_if = 'has("nvim")'

# quickrun
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {}

"let g:quickrun_config['_'] = {
"    \ 'runner' : 'vimproc',
"    \ 'runner/vimproc/updatetime' : 40,
"    \ 'outputter/buffer/into' : 1,
"\ }

" preview html in browser
let g:quickrun_config['html'] = {
    \ 'command' : 'cat',
    \ 'outputter': 'browser'
\ }

" auto-compile markdown to html and preview in html
let g:quickrun_config['markdown'] = {
    \ 'outputter': 'browser',
\ }
'''

# status line
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {}

let g:lightline.colorscheme =  'gruvbox'

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
\ }

let g:lightline.active = {
    \ 'enable': {
    \   'statusline': 1,
    \   'tabline': 1
    \ },
    \ 'left': [
    \   [ 'mode', 'relativepath', 'paste' ],
    \   [ 'fugitive',],
    \   [ 'readonly', 'modified',   ]
    \ ],
    \ 'right': [
    \   [ 'lineinfo', 'percent', ],
    \   ['linter_checking', 'linter_warnings', 'linter_errors', 'linter_ok' ],
    \   [ 'filetype', 'fileencoding', 'fileformat', ],
    \ ]
\ }

let g:lightline.inactive = {
    \ 'enable': {
    \   'statusline': 1,
    \   'tabline': 1
    \ },
    \ 'left': [
    \   [ 'relativepath' ],
    \   [ 'fugitive' ],
    \   [ 'readonly', 'modified' ]
    \ ],
    \ 'right': [
    \   [ ],
    \   [ ],
    \   [ 'filetype', 'fileencoding', 'fileformat' ]
    \ ]
\ }

let g:lightline.component_function = { 
    \   'fileformat': 'FileFormat',
    \   'filetype': 'LlFileType',
    \   'fileencoding': 'LlFileEncoding',
    \   'lineinfo': 'LlLineInfo',
    \   'percent': 'LlPercent',
    \   'anzu': 'anzu#search_status',
    \   'fugitive': 'LlFugitive',
\ }

let g:lightline.component_type = {
    \   'linter_checking': 'left',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
\ }


" from https://gist.githubusercontent.com/rcmdnk/6457180/raw/lightline_settings.vim
let g:status_line_threshold = 60

function! LlPercent()
    return winwidth('.') >= 
        \   g:status_line_threshold-10 ?
        \   printf('%3d%%', 100*line('.')/line('$')) 
        \   : ''
endfunction

function! LlLineInfo()
    return winwidth('.') >=
        \   g:status_line_threshold-15 ?
        \   printf("%3d:%-2d", line('.'), col('.')) 
        \   : ''
endfunction

function! LlFileFormat()
    return winwidth('.') >= 
        \   g:status_line_threshold-0 ?
        \   &fileformat 
        \   : ''
endfunction

function! LlFileType()
    return winwidth('.') >= 
        \   g:status_line_threshold-30 ?
        \   (strlen(&filetype) ? &filetype : 'no ft') 
        \   : ''
endfunction

function! LlFileEncoding()
    return winwidth('.') >= 
        \    g:status_line_threshold-20 ?
        \   (strlen(&fenc) ? &fenc : &enc)
        \   : ''
endfunction

function! LlFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
endfunction
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim']

# complement
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_if = 'has("nvim")&&has("python3")'
hook_add = '''
" use neovim virutualenv when exists
" use default python when not
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

let g:python_host_prog=system('echo -n $(ls $HOME/.pyenv/versions/neovim2/bin/python || which python2)')
let g:python3_host_prog=system('echo -n $(ls $HOME/.pyenv/versions/neovim3/bin/python || which python3)')

" enable at startup
let g:deoplete#enable_at_startup = 1 

" use smart case completion
let g:deoplete#enable_smart_case = 1
let g:deoplete#enable_camel_case_completion = 1 
let g:deoplete#enable_underbar_completion = 1

" im settings
let g:deoplete#lock_iminsert = 1
'''

# snippets 
[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
" expand snippts when Ctrl-k has been pressed
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" jump prediction using tab-key
imap <expr><TAB> neosnippet#jumpable() ?
    \   '<Plug>(neosnippet_jump)'
    \   : '<TAB>'
smap <expr><TAB> neosnippet#jumpable() ?
    \   '<Plug>(neosnippet_jump)'
    \   : '<TAB>'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'


# syntax check
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_column_always = 1
"let g:ale_open_list = 1
let g:ale_set_quickfix = 1
'''

# highlight on quickfix
[[plugins]]
repo = 'cohama/vim-hier'

# add parentheses
[[plugins]]
repo = 'tpope/vim-surround'

# commentify
[[plugins]]
repo = 'vim-scripts/EnhCommentify.vim'

# template
[[plugins]]
repo = 'thinca/vim-template'

# indent
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'go']
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_auto_colors = 0
highlight IndentGuidesOdd  guibg=darkgray ctermbg=gray
highlight IndentGuidesEven guibg=darkgray ctermbg=darkgray
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 1
'''


# git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# web-api
[[plugins]]
repo = 'mattn/webapi-vim'

# filer
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeWinSize = 30
let g:NERDTreeMinimalUI = 1
let g:NERDTreeDirArrows = 0
let g:NERDTreeShowBookmarks = 1
"auto cd
let g:NERDTreeChDirMode=2
let g:NERDTreeWinPos = 'left'
"let g:NERDTreeWinSize=25

" open NERDTREE when <leader>l has been pressed
"
nmap <silent> <leader>f      :NERDTreeToggle<CR>
vmap <silent> <leader>f <Esc>:NERDTreeToggle<CR>
omap <silent> <leader>f      :NERDTreeToggle<CR>
imap <silent> <leader>f <Esc>:NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler'

# reference
[[plugins]]
repo = 'thinca/vim-ref'

# ctags
[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
let g:vim_tags_auto_generate = 1
'''

# search count
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
nmap <Esc><Esc> <Plug>(anzu-clear-search-status),<C-u>set nohlsearch
'''
